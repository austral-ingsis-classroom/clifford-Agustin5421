@startuml
interface FileSystemComponent {
  +getChildren(): List<FileSystemComponent>
  +getName(): String
  +father(): FileSystemComponent
  +add(file: FileSystemComponent)
  +remove(file: FileSystemComponent)
}

class Directory{
    -name: String
    -parent: FileSystemComponent
    -children: List<FileSystemComponent>
    +getChildren(): List<FileSystemComponent>
    +getName(): String
    +father(): FileSystemComponent
    +add(file: FileSystemComponent)
    +remove(file: FileSystemComponent)
}

class File{
    -name: String
    -parent: FileSystemComponent
    +getName(): String
    +father(): FileSystemComponent
}


class FileSystem{
    -currentFile: FileSystemComponent
    -Map<String, Command> commands
    +executeCommand(args: String)
    +getCurrentFile(): FileSystemComponent
    +setCurrentFile(file: FileSystemComponent)
}

interface Command{
    +execute(file: FileSystem, args: String)
}

class CdCommand{
    +execute(file: FileSystem, args: String)
}
class LsCommand{
    +execute(file: FileSystem, args: String)
}
class TouchCommand{
    +execute(file: FileSystem, args: String)
}
class MkdirCommand{
    +execute(file: FileSystem, args: String)
}

class PwdCommand{
    +execute(file: FileSystem, args: String)
}

class RmCommand{
    +execute(file: FileSystem, args: String)
}

FileSystemComponent --o FileSystem : currentFile

FileSystemComponent <|-- Directory
FileSystemComponent <|-- File
FileSystemComponent --* Directory : children

FileSystem o-- Command : commands

Command <|-- CdCommand
Command <|-- LsCommand
Command <|-- TouchCommand
Command <|-- MkdirCommand
Command <|-- PwdCommand
Command <|-- RmCommand

@enduml